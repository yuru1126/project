//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbFluid
// {
//
//   float deltaT;                      // Offset:    0 Size:     4
//   float omega;                       // Offset:    4 Size:     4 [unused]
//   float re;                          // Offset:    8 Size:     4 [unused]
//   float fluid_dummy;                 // Offset:   12 Size:     4 [unused]
//
// }
//
// Resource bind info for X_buffer
// {
//
//   struct Velocity
//   {
//       
//       float velocity;                // Offset:    0
//       float after;                   // Offset:    4
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for Y_buffer
// {
//
//   struct Velocity
//   {
//       
//       float velocity;                // Offset:    0
//       float after;                   // Offset:    4
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// X_buffer                              UAV  struct         r/w             u0      1 
// Y_buffer                              UAV  struct         r/w             u1      1 
// CbFluid                           cbuffer      NA          NA            cb8      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB8[1], immediateIndexed
dcl_uav_structured u0, 8
dcl_uav_structured u1, 8
dcl_input vThreadID.xy
dcl_temps 4
dcl_thread_group 10, 10, 1
iadd r0.xyz, vThreadID.xyxx, l(1, 1, 2, 0)
imad r1.xyz, r0.yyyy, l(13, 12, 13, 0), r0.xxzx
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.w, r1.x, l(0), u0.xxxx
imad r1.w, r0.y, l(12), vThreadID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r1.w, r1.w, l(0), u1.xxxx
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r2.x, r1.y, l(0), u1.xxxx
imad r2.yzw, r0.yyyy, l(0, 12, 13, 13), l(0, 12, -13, -13)
iadd r3.x, r2.y, vThreadID.x
iadd r2.yzw, r0.xxxz, r2.yyzw
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.z, r3.x, l(0), u1.xxxx
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r2.y, r2.y, l(0), u1.xxxx
lt r3.x, r0.w, l(0.000000)
and r3.x, r3.x, l(1)
iadd r3.y, r0.x, r3.x
iadd r3.x, r3.x, vThreadID.x
imad r3.x, r0.y, l(13), r3.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r3.x, r3.x, l(0), u0.xxxx
imad r3.y, r0.y, l(13), r3.y
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r3.y, r3.y, l(0), u0.xxxx
add r3.y, -r3.x, r3.y
mul r3.x, r0.w, r3.y
mad r0.w, -r3.x, cb8[0].x, r0.w
add r1.w, r1.w, r2.x
add r0.z, r0.z, r1.w
add r0.z, r2.y, r0.z
lt r1.w, r0.z, l(0.000000)
mul r0.z, r0.z, l(0.250000)
and r1.w, r1.w, l(1)
iadd r2.y, r0.y, r1.w
iadd r1.w, r1.w, vThreadID.y
imad r1.w, r1.w, l(13), r0.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r1.w, r1.w, l(0), u0.xxxx
imad r2.y, r2.y, l(13), r0.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r2.y, r2.y, l(0), u0.xxxx
add r2.y, -r1.w, r2.y
mul r0.z, r0.z, r2.y
mad r0.z, -r0.z, cb8[0].x, r0.w
store_structured u0.x, r1.x, l(4), r0.z
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.z, r2.z, l(0), u0.xxxx
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.w, r2.w, l(0), u0.xxxx
add r0.z, r0.w, r0.z
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.w, r1.z, l(0), u0.xxxx
add r0.z, r0.w, r0.z
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.w, r1.x, l(0), u0.xxxx
add r0.z, r0.w, r0.z
lt r0.w, r0.z, l(0.000000)
mul r0.z, r0.z, l(0.250000)
and r0.w, r0.w, l(1)
iadd r1.x, r0.w, r0.x
iadd r0.w, r0.w, vThreadID.x
imad r0.w, r0.y, l(12), r0.w
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.w, r0.w, l(0), u1.xxxx
imad r1.x, r0.y, l(12), r1.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r1.x, r1.x, l(0), u1.xxxx
add r1.x, -r0.w, r1.x
mul r0.z, r0.z, r1.x
mad r0.z, -r0.z, cb8[0].x, r2.x
lt r0.w, r2.x, l(0.000000)
and r0.w, r0.w, l(1)
iadd r0.y, r0.w, r0.y
iadd r0.w, r0.w, vThreadID.y
imad r0.w, r0.w, l(12), r0.x
imad r0.x, r0.y, l(12), r0.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.x, r0.x, l(0), u1.xxxx
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.y, r0.w, l(0), u1.xxxx
add r0.x, -r0.y, r0.x
mul r0.x, r0.x, r2.x
mad r0.x, -r0.x, cb8[0].x, r0.z
store_structured u1.x, r1.y, l(4), r0.x
ret 
// Approximately 70 instruction slots used
