//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbScene
// {
//
//   row_major float4x4 viewProjection; // Offset:    0 Size:    64 [unused]
//   float4 lightDirection;             // Offset:   64 Size:    16
//   float4 camera_position;            // Offset:   80 Size:    16
//
// }
//
// cbuffer CbVoronoi
// {
//
//   float4 lenges;                     // Offset:    0 Size:    16
//   float4 timeLine;                   // Offset:   16 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CbScene                           cbuffer      NA          NA            cb0      1 
// CbVoronoi                         cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// DEPTH                    0     z         2     NONE   float     z 
// COLOR                    0   xyzw        3     NONE   float       
// TANGENT                  0   xyz         4     NONE   float   xyz 
// BINORMAL                 0   xyz         5     NONE   float   xyz 
// NORMAL                   0   xyz         6     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
// SV_TARGET                2   xyzw        2   TARGET   float   xyzw
// SV_TARGET                3   xyzw        3   TARGET   float   xyzw
// SV_TARGET                4   xyzw        4   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[6], immediateIndexed
dcl_constantbuffer CB3[2], immediateIndexed
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xy
dcl_input_ps linear v2.z
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_temps 8
lt r0.xyzw, l(0.001000, 0.001000, 0.001000, 0.001000), cb3[0].xyxy
div r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), cb3[0].xyxy
movc r0.xyzw, r0.xyzw, r1.xyzw, l(10.000000,10.000000,10.000000,10.000000)
mul r1.xy, r0.zwzz, v2.xyxx
round_ni r1.xy, r1.xyxx
ftoi r1.z, r1.y
div r1.xy, r1.xyxx, r0.xyxx
mov r2.xy, v2.xyxx
mov r2.z, l(2000.000000)
mov r1.w, l(-1)
loop 
  ilt r2.w, l(1), r1.w
  breakc_nz r2.w
  itof r2.w, r1.w
  mad r3.y, cb3[0].y, r2.w, r1.y
  iadd r2.w, r1.w, r1.z
  and r3.z, r2.w, l(0x80000000)
  imax r2.w, r2.w, -r2.w
  and r2.w, r2.w, l(1)
  ineg r3.w, r2.w
  movc r2.w, r3.z, r3.w, r2.w
  add r3.z, -r3.y, v2.y
  mul r3.z, r3.z, r3.z
  mov r4.xyz, r2.xyzx
  mov r3.w, l(-1)
  loop 
    ilt r4.w, l(1), r3.w
    breakc_nz r4.w
    itof r4.w, r3.w
    mad r4.w, cb3[0].x, r4.w, r1.x
    add r5.x, r4.w, cb3[0].z
    movc r3.x, r2.w, r4.w, r5.x
    add r4.w, -r3.x, v2.x
    mad r4.w, r4.w, r4.w, r3.z
    sqrt r4.w, r4.w
    lt r5.x, r4.w, r4.z
    movc r4.xy, r5.xxxx, r3.xyxx, r4.xyxx
    min r4.z, r4.w, r4.z
    iadd r3.w, r3.w, l(1)
  endloop 
  mov r2.xyz, r4.xyzx
  iadd r1.w, r1.w, l(1)
endloop 
add r1.xyzw, v2.xyxy, l(0.001875, 0.000000, -0.001875, 0.000000)
mul r3.xyzw, r0.xyzw, r1.xyzw
round_ni r3.xyzw, r3.xyzw
ftoi r2.zw, r3.yyyw
div r3.xyzw, r3.xyzw, r0.xyzw
mov r4.xy, r1.xyxx
mov r4.zw, l(0,0,2000.000000,-1)
loop 
  ilt r5.x, l(1), r4.w
  breakc_nz r5.x
  itof r5.x, r4.w
  mad r5.y, cb3[0].y, r5.x, r3.y
  iadd r5.z, r2.z, r4.w
  and r5.w, r5.z, l(0x80000000)
  imax r5.z, r5.z, -r5.z
  and r5.z, r5.z, l(1)
  ineg r6.x, r5.z
  movc r5.z, r5.w, r6.x, r5.z
  add r5.w, r1.y, -r5.y
  mul r5.w, r5.w, r5.w
  mov r6.xyz, r4.xyzx
  mov r6.w, l(-1)
  loop 
    ilt r7.x, l(1), r6.w
    breakc_nz r7.x
    itof r7.x, r6.w
    mad r7.x, cb3[0].x, r7.x, r3.x
    add r7.y, r7.x, cb3[0].z
    movc r5.x, r5.z, r7.x, r7.y
    add r7.x, r1.x, -r5.x
    mad r7.x, r7.x, r7.x, r5.w
    sqrt r7.x, r7.x
    lt r7.y, r7.x, r6.z
    movc r6.xy, r7.yyyy, r5.xyxx, r6.xyxx
    min r6.z, r6.z, r7.x
    iadd r6.w, r6.w, l(1)
  endloop 
  mov r4.xyz, r6.xyzx
  iadd r4.w, r4.w, l(1)
endloop 
mov r5.xy, r1.zwzz
mov r5.z, l(2000.000000)
mov r1.x, l(-1)
loop 
  ilt r1.y, l(1), r1.x
  breakc_nz r1.y
  itof r1.y, r1.x
  mad r3.y, cb3[0].y, r1.y, r3.w
  iadd r1.y, r1.x, r2.w
  and r2.z, r1.y, l(0x80000000)
  imax r1.y, r1.y, -r1.y
  and r1.y, r1.y, l(1)
  ineg r4.z, r1.y
  movc r1.y, r2.z, r4.z, r1.y
  add r2.z, r1.w, -r3.y
  mul r2.z, r2.z, r2.z
  mov r6.xyz, r5.xyzx
  mov r4.z, l(-1)
  loop 
    ilt r4.w, l(1), r4.z
    breakc_nz r4.w
    itof r4.w, r4.z
    mad r4.w, cb3[0].x, r4.w, r3.z
    add r5.w, r4.w, cb3[0].z
    movc r3.x, r1.y, r4.w, r5.w
    add r4.w, r1.z, -r3.x
    mad r4.w, r4.w, r4.w, r2.z
    sqrt r4.w, r4.w
    lt r5.w, r4.w, r6.z
    movc r6.xy, r5.wwww, r3.xyxx, r6.xyxx
    min r6.z, r4.w, r6.z
    iadd r4.z, r4.z, l(1)
  endloop 
  mov r5.xyz, r6.xyzx
  iadd r1.x, r1.x, l(1)
endloop 
add r1.xyzw, v2.xyxy, l(0.000000, 0.001875, 0.000000, -0.001875)
mul r3.xyzw, r0.xyzw, r1.xyzw
round_ni r3.xyzw, r3.xyzw
ftoi r2.zw, r3.yyyw
div r0.xyzw, r3.xyzw, r0.xyzw
mov r3.xy, r1.xyxx
mov r3.zw, l(0,0,2000.000000,-1)
loop 
  ilt r4.z, l(1), r3.w
  breakc_nz r4.z
  itof r4.z, r3.w
  mad r6.y, cb3[0].y, r4.z, r0.y
  iadd r4.z, r2.z, r3.w
  and r4.w, r4.z, l(0x80000000)
  imax r4.z, r4.z, -r4.z
  and r4.z, r4.z, l(1)
  ineg r5.z, r4.z
  movc r4.z, r4.w, r5.z, r4.z
  add r4.w, r1.y, -r6.y
  mul r4.w, r4.w, r4.w
  mov r7.xyz, r3.xyzx
  mov r5.z, l(-1)
  loop 
    ilt r5.w, l(1), r5.z
    breakc_nz r5.w
    itof r5.w, r5.z
    mad r5.w, cb3[0].x, r5.w, r0.x
    add r6.z, r5.w, cb3[0].z
    movc r6.x, r4.z, r5.w, r6.z
    add r5.w, r1.x, -r6.x
    mad r5.w, r5.w, r5.w, r4.w
    sqrt r5.w, r5.w
    lt r6.z, r5.w, r7.z
    movc r7.xy, r6.zzzz, r6.xyxx, r7.xyxx
    min r7.z, r5.w, r7.z
    iadd r5.z, r5.z, l(1)
  endloop 
  mov r3.xyz, r7.xyzx
  iadd r3.w, r3.w, l(1)
endloop 
mov r6.xy, r1.zwzz
mov r6.z, l(2000.000000)
mov r0.x, l(-1)
loop 
  ilt r0.y, l(1), r0.x
  breakc_nz r0.y
  itof r0.y, r0.x
  mad r1.y, cb3[0].y, r0.y, r0.w
  iadd r0.y, r0.x, r2.w
  and r2.z, r0.y, l(0x80000000)
  imax r0.y, r0.y, -r0.y
  and r0.y, r0.y, l(1)
  ineg r3.z, r0.y
  movc r0.y, r2.z, r3.z, r0.y
  add r2.z, -r1.y, r1.w
  mul r2.z, r2.z, r2.z
  mov r7.xyz, r6.xyzx
  mov r3.z, l(-1)
  loop 
    ilt r3.w, l(1), r3.z
    breakc_nz r3.w
    itof r3.w, r3.z
    mad r3.w, cb3[0].x, r3.w, r0.z
    add r4.z, r3.w, cb3[0].z
    movc r1.x, r0.y, r3.w, r4.z
    add r3.w, -r1.x, r1.z
    mad r3.w, r3.w, r3.w, r2.z
    sqrt r3.w, r3.w
    lt r4.z, r3.w, r7.z
    movc r7.xy, r4.zzzz, r1.xyxx, r7.xyxx
    min r7.z, r3.w, r7.z
    iadd r3.z, r3.z, l(1)
  endloop 
  mov r6.xyz, r7.xyzx
  iadd r0.x, r0.x, l(1)
endloop 
add r0.xy, r2.xyxx, -r4.xyxx
lt r0.xy, l(0.000010, 0.000010, 0.000000, 0.000000), |r0.xyxx|
or r0.x, r0.y, r0.x
add r0.yz, r2.xxyx, -r5.xxyx
lt r0.yz, l(0.000000, 0.000010, 0.000010, 0.000000), |r0.yyzy|
or r0.w, r0.z, r0.y
movc r0.w, r0.w, l(1.000000), l(0.500000)
movc r1.x, r0.x, l(0), r0.w
add r1.zw, r2.xxxy, -r3.xxxy
lt r1.zw, l(0.000000, 0.000000, 0.000010, 0.000010), |r1.zzzw|
or r0.w, r1.w, r1.z
add r2.xy, r2.xyxx, -r6.xyxx
lt r2.xy, l(0.000010, 0.000010, 0.000000, 0.000000), |r2.xyxx|
or r2.z, r2.y, r2.x
movc r2.z, r2.z, l(1.000000), l(0.500000)
movc r1.y, r0.w, l(0), r2.z
or r0.x, r0.y, r0.x
or r0.x, r0.z, r0.x
or r0.x, r1.z, r0.x
or r0.x, r1.w, r0.x
or r0.x, r2.x, r0.x
or r0.x, r2.y, r0.x
dp2 r0.y, v2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), cb3[1].x
mul r0.z, r0.z, cb3[0].w
frc r0.z, r0.z
mul r0.w, cb3[1].y, l(0.500000)
add r1.z, cb3[1].y, l(1.000000)
mad r0.z, r0.z, r1.z, -r0.w
add r1.zw, r0.zzzz, l(0.000000, 0.000000, 0.150000, -0.150000)
lt r0.w, r0.y, r1.z
lt r1.z, r1.w, r0.y
and r0.w, r0.w, r1.z
add r0.y, -r0.z, r0.y
mad r0.y, -|r0.y|, l(6.666667), l(1.000000)
mad r2.xyz, r0.yyyy, l(1.000000, 0.250000, 0.250000, 0.000000), l(0.000000, 0.750000, 0.750000, 0.000000)
movc r0.yzw, r0.wwww, r2.xxyz, l(0,0,0.750000,0.750000)
movc r0.xyz, r0.xxxx, r0.yzwy, l(0,0.750000,0.750000,0)
dp3 r0.w, -cb0[4].xyzx, -cb0[4].xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, -cb0[4].xyzx
dp3 r0.w, v4.xyzx, v4.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, v4.xyzx
dp3 r0.w, v5.xyzx, v5.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, v5.xyzx
dp3 r0.w, v6.xyzx, v6.xyzx
rsq r0.w, r0.w
mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r1.yzw, r4.xxyz, r1.yyyy
mad r1.xyz, r1.xxxx, r3.xyzx, r1.yzwy
mad r1.xyz, v6.xyzx, r0.wwww, r1.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
dp3 r0.w, r2.xyzx, r1.xyzx
max r0.w, r0.w, l(0.000000)
mad r0.w, r0.w, l(0.500000), l(0.500000)
add r1.w, -r0.w, l(1.000000)
mad r0.w, cb3[1].z, r1.w, r0.w
mul o0.xyz, r0.wwww, r0.xyzx
add r0.xyz, v1.xyzx, -cb0[5].xyzx
dp3 r0.x, r0.xyzx, r0.xyzx
sqrt o1.xz, r0.xxxx
mad o2.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.w, l(1.000000)
mov o1.y, v2.z
mov o1.w, l(1.000000)
mov o2.w, l(1.000000)
mov o3.xyz, v1.xyzx
mov o3.w, l(1.000000)
mov o4.xyzw, l(1.000000,1.000000,0,1.000000)
ret 
// Approximately 269 instruction slots used
