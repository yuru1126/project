//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PARTICLE_CONSTANTS
// {
//
//   uint particle_count;               // Offset:    0 Size:     4 [unused]
//   float particle_size;               // Offset:    4 Size:     4 [unused]
//   float elapsed_time;                // Offset:    8 Size:     4
//   float Progress_time;               // Offset:   12 Size:     4
//   float4 setHSV;                     // Offset:   16 Size:    16 [unused]
//   float divide_length;               // Offset:   32 Size:     4 [unused]
//   int count;                         // Offset:   36 Size:     4 [unused]
//   float2 dummy;                      // Offset:   40 Size:     8 [unused]
//
// }
//
// cbuffer CbParticle
// {
//
//   struct ParticleData
//   {
//       
//       float4 position_max;           // Offset:    0
//       float4 position_min;           // Offset:   16
//       float4 velocity_max;           // Offset:   32
//       float4 velocity_min;           // Offset:   48
//       float4 color_max;              // Offset:   64
//       float4 color_min;              // Offset:   80
//       float2 lifespan;               // Offset:   96
//       float set_divide_age;          // Offset:  104
//       float gravity;                 // Offset:  108
//       float draw_size;               // Offset:  112
//       float animation_speed;         // Offset:  116
//       float length_shrink_flag;      // Offset:  120
//       float appearance_frequency;    // Offset:  124
//       float4 dummyF1;                // Offset:  128
//       int draw_type;                 // Offset:  144
//       int3 tiles;                    // Offset:  148
//       int2 set_tiles;                // Offset:  160
//       int set_state;                 // Offset:  168
//       int hsv_data_flag;             // Offset:  172
//       int velocity_normalize_flag;   // Offset:  176
//       int3 dummyI1;                  // Offset:  180
//
//   } particle_data;                   // Offset:    0 Size:   192
//   
//   struct ParticleData
//   {
//       
//       float4 position_max;           // Offset:  192
//       float4 position_min;           // Offset:  208
//       float4 velocity_max;           // Offset:  224
//       float4 velocity_min;           // Offset:  240
//       float4 color_max;              // Offset:  256
//       float4 color_min;              // Offset:  272
//       float2 lifespan;               // Offset:  288
//       float set_divide_age;          // Offset:  296
//       float gravity;                 // Offset:  300
//       float draw_size;               // Offset:  304
//       float animation_speed;         // Offset:  308
//       float length_shrink_flag;      // Offset:  312
//       float appearance_frequency;    // Offset:  316
//       float4 dummyF1;                // Offset:  320
//       int draw_type;                 // Offset:  336
//       int3 tiles;                    // Offset:  340
//       int2 set_tiles;                // Offset:  352
//       int set_state;                 // Offset:  360
//       int hsv_data_flag;             // Offset:  364
//       int velocity_normalize_flag;   // Offset:  368
//       int3 dummyI1;                  // Offset:  372
//
//   } death_emitter_data;              // Offset:  192 Size:   192 [unused]
//   
//   struct ParticleData
//   {
//       
//       float4 position_max;           // Offset:  384
//       float4 position_min;           // Offset:  400
//       float4 velocity_max;           // Offset:  416
//       float4 velocity_min;           // Offset:  432
//       float4 color_max;              // Offset:  448
//       float4 color_min;              // Offset:  464
//       float2 lifespan;               // Offset:  480
//       float set_divide_age;          // Offset:  488
//       float gravity;                 // Offset:  492
//       float draw_size;               // Offset:  496
//       float animation_speed;         // Offset:  500
//       float length_shrink_flag;      // Offset:  504
//       float appearance_frequency;    // Offset:  508
//       float4 dummyF1;                // Offset:  512
//       int draw_type;                 // Offset:  528
//       int3 tiles;                    // Offset:  532
//       int2 set_tiles;                // Offset:  544
//       int set_state;                 // Offset:  552
//       int hsv_data_flag;             // Offset:  556
//       int velocity_normalize_flag;   // Offset:  560
//       int3 dummyI1;                  // Offset:  564
//
//   } survival_emitter_data;           // Offset:  384 Size:   192 [unused]
//   int sub_emitter_flag;              // Offset:  576 Size:     4
//   float3 dummy2;                     // Offset:  580 Size:    12 [unused]
//
// }
//
// Resource bind info for particle_buffer
// {
//
//   struct particle
//   {
//       
//       float4 position;               // Offset:    0
//       float4 velocity;               // Offset:   16
//       float4 normal;                 // Offset:   32
//       float4 color;                  // Offset:   48
//       float gravity;                 // Offset:   64
//       float age;                     // Offset:   68
//       float2 length_shrink;          // Offset:   72
//       float size;                    // Offset:   80
//       float divide_age;              // Offset:   84
//       float use_tile;                // Offset:   88
//       float animation_speed;         // Offset:   92
//       float appearance_timer;        // Offset:   96
//       float appearance_frequency;    // Offset:  100
//       float2 dummyF;                 // Offset:  104
//       int draw_type;                 // Offset:  112
//       int3 tiles;                    // Offset:  116
//       int state;                     // Offset:  128
//       int sub_emitter_flag;          // Offset:  132
//       int2 dummyI;                   // Offset:  136
//
//   } $Element;                        // Offset:    0 Size:   144
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// particle_buffer                       UAV  struct      append             u3      1 
// PARTICLE_CONSTANTS                cbuffer      NA          NA            cb0      1 
// CbParticle                        cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_constantbuffer CB2[37], immediateIndexed
dcl_uav_structured u3, 144
dcl_input vThreadID.x
dcl_temps 7
dcl_thread_group 128, 1, 1
utof r0.x, vThreadID.x
mul r0.x, r0.x, cb0[0].z
mad r0.x, r0.x, l(8.346100), cb0[0].w
add r1.xyzw, r0.xxxx, l(1.000000, 2.000000, 3.000000, 4.000000)
dp2 r0.y, r1.xyxx, l(472.899994, 133.699997, 0.000000, 0.000000)
sincos r0.y, null, r0.y
mul r0.y, r0.y, l(70124.148438)
frc r0.y, r0.y
mad r0.y, r0.y, l(2.000000), l(-1.000000)
mad r2.x, r0.y, l(0.500000), l(0.500000)
dp2 r0.y, r1.zwzz, l(472.899994, 133.699997, 0.000000, 0.000000)
sincos r0.y, null, r0.y
mul r0.y, r0.y, l(70124.148438)
frc r0.y, r0.y
mad r0.y, r0.y, l(2.000000), l(-1.000000)
mad r2.y, r0.y, l(0.500000), l(0.500000)
add r1.xyzw, r0.xxxx, l(5.000000, 6.000000, 9.000000, 10.000000)
dp2 r0.y, r1.xyxx, l(472.899994, 133.699997, 0.000000, 0.000000)
sincos r0.y, null, r0.y
mul r0.y, r0.y, l(70124.148438)
frc r0.y, r0.y
mad r0.y, r0.y, l(2.000000), l(-1.000000)
mad r2.z, r0.y, l(0.500000), l(0.500000)
dp2 r0.y, r1.zwzz, l(472.899994, 133.699997, 0.000000, 0.000000)
sincos r0.y, null, r0.y
mul r0.y, r0.y, l(70124.148438)
frc r0.y, r0.y
mad r0.y, r0.y, l(2.000000), l(-1.000000)
mad r0.y, r0.y, l(0.500000), l(0.500000)
add r1.xyzw, cb0[0].wwww, l(11.000000, 12.000000, 13.000000, 14.000000)
dp2 r0.z, r1.xyxx, l(472.899994, 133.699997, 0.000000, 0.000000)
sincos r0.z, null, r0.z
mul r0.z, r0.z, l(70124.148438)
frc r0.z, r0.z
mad r0.z, r0.z, l(2.000000), l(-1.000000)
mad r3.x, r0.z, l(0.500000), l(0.500000)
dp2 r0.z, r1.zwzz, l(472.899994, 133.699997, 0.000000, 0.000000)
sincos r0.z, null, r0.z
mul r0.z, r0.z, l(70124.148438)
frc r0.z, r0.z
mad r0.z, r0.z, l(2.000000), l(-1.000000)
mad r3.y, r0.z, l(0.500000), l(0.500000)
add r0.zw, cb0[0].wwww, l(0.000000, 0.000000, 15.000000, 16.000000)
dp2 r0.z, r0.zwzz, l(472.899994, 133.699997, 0.000000, 0.000000)
sincos r0.z, null, r0.z
mul r0.z, r0.z, l(70124.148438)
frc r0.z, r0.z
mad r0.z, r0.z, l(2.000000), l(-1.000000)
mad r3.z, r0.z, l(0.500000), l(0.500000)
add r1.xyzw, r0.xxxx, l(18.000000, 19.000000, 20.000000, 21.000000)
dp2 r0.z, r1.xyxx, l(472.899994, 133.699997, 0.000000, 0.000000)
sincos r0.z, null, r0.z
mul r0.z, r0.z, l(70124.148438)
frc r0.z, r0.z
mad r0.z, r0.z, l(2.000000), l(-1.000000)
mad r0.z, r0.z, l(0.500000), l(0.500000)
dp2 r0.w, r1.zwzz, l(472.899994, 133.699997, 0.000000, 0.000000)
sincos r0.w, null, r0.w
mul r0.w, r0.w, l(70124.148438)
frc r0.w, r0.w
mad r0.w, r0.w, l(2.000000), l(-1.000000)
mad r1.x, r0.w, l(0.500000), l(0.500000)
add r4.xyzw, r0.xxxx, l(22.000000, 23.000000, 24.000000, 25.000000)
dp2 r0.w, r4.xyxx, l(472.899994, 133.699997, 0.000000, 0.000000)
sincos r0.w, null, r0.w
mul r0.w, r0.w, l(70124.148438)
frc r0.w, r0.w
mad r0.w, r0.w, l(2.000000), l(-1.000000)
mad r1.y, r0.w, l(0.500000), l(0.500000)
dp2 r0.w, r4.zwzz, l(472.899994, 133.699997, 0.000000, 0.000000)
sincos r0.w, null, r0.w
mul r0.w, r0.w, l(70124.148438)
frc r0.w, r0.w
mad r0.w, r0.w, l(2.000000), l(-1.000000)
mad r1.z, r0.w, l(0.500000), l(0.500000)
add r4.xyz, cb2[0].xyzx, -cb2[1].xyzx
mad r1.xyz, r1.xyzx, r4.xyzx, cb2[1].xyzx
add r4.xyzw, cb2[2].xyzw, -cb2[3].xyzw
mad r2.xyz, r2.xyzx, r4.xyzx, cb2[3].xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
sqrt r2.w, r0.w
lt r2.w, l(0.000000), r2.w
itof r3.w, cb2[11].x
mov_sat r3.w, r3.w
mad r0.y, r0.y, r4.w, cb2[3].w
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r2.xyzx
mad r4.xyz, r4.xyzx, r0.yyyy, -r2.xyzx
mad r4.xyz, r3.wwww, r4.xyzx, r2.xyzx
movc r2.xyz, r2.wwww, r4.xyzx, r2.xyzx
add r4.xyz, cb2[4].xyzx, -cb2[5].xyzx
mad r3.xyz, r3.xyzx, r4.xyzx, cb2[5].xyzx
if_nz cb2[10].w
  eq r0.y, r3.y, l(0.000000)
  if_nz r0.y
    mov r3.xy, r3.zzzz
  else 
    mul r0.y, r3.x, l(360.000000)
    ge r0.y, r0.y, -r0.y
    movc r0.yw, r0.yyyy, l(0,360.000000,0,0.002778), l(0,-360.000000,0,-0.002778)
    mul r0.w, r0.w, r3.x
    frc r0.w, r0.w
    mul r0.y, r0.w, r0.y
    mul r0.w, r0.y, l(0.016667)
    round_z r0.w, r0.w
    mad r0.y, r0.y, l(0.016667), -r0.w
    add r4.x, -r3.y, l(1.000000)
    mul r4.y, r3.z, r4.x
    mad r5.x, -r3.y, r0.y, l(1.000000)
    mul r4.z, r3.z, r5.x
    add r0.y, -r0.y, l(1.000000)
    mad r0.y, -r3.y, r0.y, l(1.000000)
    mul r4.x, r0.y, r3.z
    eq r5.xyzw, r0.wwww, l(0.000000, 1.000000, 2.000000, 3.000000)
    eq r0.yw, r0.wwww, l(0.000000, 4.000000, 0.000000, 5.000000)
    mov r4.w, r3.z
    and r6.xyz, r4.wyzw, r0.wwww
    movc r6.xyz, r0.yyyy, r4.xywx, r6.xyzx
    movc r6.xyz, r5.wwww, r4.yzwy, r6.xyzx
    movc r6.xyz, r5.zzzz, r4.ywxy, r6.xyzx
    movc r5.yzw, r5.yyyy, r4.zzwy, r6.xxyz
    movc r3.xyz, r5.xxxx, r4.wxyw, r5.yzwy
  endif 
endif 
add r0.y, -cb2[6].x, cb2[6].y
mad r4.y, r0.z, r0.y, cb2[6].x
max r5.y, cb2[6].z, l(0.001000)
add r0.xy, r0.xxxx, l(7.000000, 8.000000, 0.000000, 0.000000)
dp2 r0.x, r0.xyxx, l(472.899994, 133.699997, 0.000000, 0.000000)
sincos r0.x, null, r0.x
mul r0.x, r0.x, l(70124.148438)
frc r0.x, r0.x
mad r0.x, r0.x, l(2.000000), l(-1.000000)
mad r0.x, r0.x, l(0.500000), l(0.500000)
iadd r0.y, -cb2[10].x, cb2[10].y
itof r0.y, r0.y
mul r0.x, r0.y, r0.x
round_ne r0.x, r0.x
itof r0.y, cb2[10].x
add r5.z, r0.x, r0.y
imm_atomic_alloc r0.x, u3
mov r1.w, l(0)
store_structured u3.xyzw, r0.x, l(0), r1.xyzw
mov r2.w, l(0)
store_structured u3.xyzw, r0.x, l(16), r2.xyzw
store_structured u3.xyzw, r0.x, l(32), l(0,0,1.000000,0)
mov r3.w, l(1.000000)
store_structured u3.xyzw, r0.x, l(48), r3.xyzw
mov r4.x, cb2[6].w
mov r4.zw, cb2[7].zzzz
store_structured u3.xyzw, r0.x, l(64), r4.xyzw
mov r5.xw, cb2[7].xxxy
store_structured u3.xyzw, r0.x, l(80), r5.xyzw
mov r1.x, cb2[7].w
mov r1.z, l(0)
store_structured u3.xyzw, r0.x, l(96), r1.xxzz
store_structured u3.xyzw, r0.x, l(112), cb2[9].xyzw
mov r1.x, cb2[10].z
mov r1.y, cb2[36].x
mov r1.zw, l(0,0,0,0)
store_structured u3.xyzw, r0.x, l(128), r1.xyzw
ret 
// Approximately 162 instruction slots used
