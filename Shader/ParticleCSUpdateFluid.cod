//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PARTICLE_CONSTANTS
// {
//
//   uint particle_count;               // Offset:    0 Size:     4
//   float particle_size;               // Offset:    4 Size:     4 [unused]
//   float elapsed_time;                // Offset:    8 Size:     4
//   float Progress_time;               // Offset:   12 Size:     4 [unused]
//   float4 setHSV;                     // Offset:   16 Size:    16 [unused]
//   float divide_length;               // Offset:   32 Size:     4
//   int count;                         // Offset:   36 Size:     4 [unused]
//   float2 dummy;                      // Offset:   40 Size:     8 [unused]
//
// }
//
// cbuffer SCENE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 view_projection;// Offset:    0 Size:    64 [unused]
//   float4 camera_position;            // Offset:   64 Size:    16
//
// }
//
// Resource bind info for particle_buffer
// {
//
//   struct particle
//   {
//       
//       float4 position;               // Offset:    0
//       float4 velocity;               // Offset:   16
//       float4 normal;                 // Offset:   32
//       float4 color;                  // Offset:   48
//       float gravity;                 // Offset:   64
//       float age;                     // Offset:   68
//       float2 length_shrink;          // Offset:   72
//       float size;                    // Offset:   80
//       float divide_age;              // Offset:   84
//       float use_tile;                // Offset:   88
//       float animation_speed;         // Offset:   92
//       float appearance_timer;        // Offset:   96
//       float appearance_frequency;    // Offset:  100
//       float2 dummyF;                 // Offset:  104
//       int draw_type;                 // Offset:  112
//       int3 tiles;                    // Offset:  116
//       int state;                     // Offset:  128
//       int sub_emitter_flag;          // Offset:  132
//       int2 dummyI;                   // Offset:  136
//
//   } $Element;                        // Offset:    0 Size:   144
//
// }
//
// Resource bind info for X_buffer
// {
//
//   struct Velocity
//   {
//       
//       float velocity;                // Offset:    0
//       float after;                   // Offset:    4
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for Y_buffer
// {
//
//   struct Velocity
//   {
//       
//       float velocity;                // Offset:    0
//       float after;                   // Offset:    4
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// particle_buffer                       UAV  struct         r/w             u0      1 
// X_buffer                              UAV  struct         r/w             u5      1 
// Y_buffer                              UAV  struct         r/w             u6      1 
// PARTICLE_CONSTANTS                cbuffer      NA          NA            cb0      1 
// SCENE_CONSTANT_BUFFER             cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_constantbuffer CB1[5], immediateIndexed
dcl_uav_structured u0, 144
dcl_uav_structured u5, 8
dcl_uav_structured u6, 8
dcl_input vThreadID.x
dcl_temps 5
dcl_thread_group 256, 1, 1
uge r0.x, cb0[0].x, vThreadID.x
if_nz r0.x
  ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r0.xyz, vThreadID.x, l(0), u0.xyzx
  ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r0.w, vThreadID.x, l(76), u0.xxxx
  add r1.xyz, r0.xyzx, -cb1[4].xyzx
  dp3 r0.z, r1.xyzx, r1.xyzx
  sqrt r1.w, r0.z
  div_sat r1.w, r1.w, cb0[2].x
  add r0.w, -r0.w, l(1.000000)
  max r0.w, r0.w, r1.w
  rsq r0.z, r0.z
  mul r1.xyz, r0.zzzz, r1.xyzx
  add r2.xy, r0.xyxx, l(7.500000, 5.000000, 0.000000, 0.000000)
  mul_sat r2.xy, r2.xyxx, l(0.100000, 0.100000, 0.000000, 0.000000)
  mul r2.zw, r2.xxxy, l(0.000000, 0.000000, 11.000000, 11.000000)
  round_ne r2.zw, r2.zzzw
  ftoi r3.xy, r2.zwzz
  mad r2.xy, r2.xyxx, l(11.000000, 11.000000, 0.000000, 0.000000), -r2.zwzz
  lt r2.zw, l(0.000000, 0.000000, 0.000000, 0.000000), r2.xxxy
  movc r2.zw, r2.zzzw, l(0,0,1,1), l(0,0,-1,-1)
  imad r3.zw, r3.yyyy, l(0, 0, 13, 12), r3.xxxx
  ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.z, r3.z, l(0), u5.xxxx
  iadd r2.zw, r2.zzzw, r3.xxxy
  and r4.xy, r2.zwzz, l(0x80000000, 0x80000000, 0, 0)
  imax r2.zw, r2.zzzw, -r2.zzzw
  udiv null, r2.zw, r2.zzzw, l(0, 0, 12, 12)
  ineg r4.zw, r2.zzzw
  movc r2.zw, r4.xxxy, r4.zzzw, r2.zzzw
  imad r3.yz, r3.yyyy, l(0, 13, 12, 0), r2.zzzz
  ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r1.w, r3.y, l(0), u5.xxxx
  add r1.w, -r0.z, r1.w
  mad r1.w, r1.w, |r2.x|, r0.z
  imad r2.zw, r2.wwww, l(0, 0, 13, 12), r3.xxxx
  ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r2.z, r2.z, l(0), u5.xxxx
  add r0.z, -r0.z, r2.z
  mad r0.z, r0.z, |r2.y|, r1.w
  ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r1.w, r3.w, l(0), u6.xxxx
  ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r2.z, r3.z, l(0), u6.xxxx
  add r2.z, -r1.w, r2.z
  mad r2.x, r2.z, |r2.x|, r1.w
  ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r2.z, r2.w, l(0), u6.xxxx
  add r1.w, -r1.w, r2.z
  mad r1.w, r1.w, |r2.y|, r2.x
  mad r2.x, r0.z, cb0[0].z, r0.x
  mad r2.y, r1.w, cb0[0].z, r0.y
  store_structured u0.xy, vThreadID.x, l(0), r2.xyxx
  store_structured u0.xyz, vThreadID.x, l(32), r1.xyzx
  store_structured u0.x, vThreadID.x, l(72), r0.w
endif 
ret 
// Approximately 50 instruction slots used
