//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbFluid
// {
//
//   float deltaT;                      // Offset:    0 Size:     4 [unused]
//   float omega;                       // Offset:    4 Size:     4
//   float re;                          // Offset:    8 Size:     4 [unused]
//   float fluid_dummy;                 // Offset:   12 Size:     4 [unused]
//
// }
//
// Resource bind info for divergence
// {
//
//   float $Element;                    // Offset:    0 Size:     4
//
// }
//
// Resource bind info for pressure
// {
//
//   float $Element;                    // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// divergence                            UAV  struct         r/w             u2      1 
// pressure                              UAV  struct         r/w             u3      1 
// CbFluid                           cbuffer      NA          NA            cb8      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB8[1], immediateIndexed
dcl_uav_structured u2, 4
dcl_uav_structured u3, 4
dcl_temps 5
dcl_thread_group 1, 1, 1
add r0.x, -cb8[0].y, l(1.000000)
mul r0.y, cb8[0].y, l(0.250000)
mov r0.z, l(0)
loop 
  ige r0.w, r0.z, l(100)
  breakc_nz r0.w
  mov r0.w, l(1)
  loop 
    ige r1.x, r0.w, l(11)
    breakc_nz r1.x
    ieq r1.xy, r0.wwww, l(1, 10, 0, 0)
    iadd r2.xyzw, r0.wwww, l(12, 132, 120, -1)
    iadd r1.z, r0.w, l(1)
    mov r1.w, l(1)
    loop 
      ige r3.x, r1.w, l(11)
      breakc_nz r3.x
      if_nz r1.x
        imul null, r3.x, r1.w, l(12)
        imad r3.y, r1.w, l(12), l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r3.y, r3.y, l(0), u3.xxxx
        store_structured u3.x, r3.x, l(0), r3.y
      endif 
      if_nz r1.y
        imad r3.xy, r1.wwww, l(12, 12, 0, 0), l(11, 10, 0, 0)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r3.y, r3.y, l(0), u3.xxxx
        store_structured u3.x, r3.x, l(0), r3.y
      endif 
      ieq r3.xy, r1.wwww, l(1, 10, 0, 0)
      if_nz r3.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r3.x, r2.x, l(0), u3.xxxx
        store_structured u3.x, r0.w, l(0), r3.x
      endif 
      if_nz r3.y
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r3.x, r2.z, l(0), u3.xxxx
        store_structured u3.x, r2.y, l(0), r3.x
      endif 
      imad r3.x, r1.w, l(12), r0.w
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r3.y, r3.x, l(0), u3.xxxx
      imad r3.z, r1.w, l(12), r2.w
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r3.z, r3.z, l(0), u3.xxxx
      imad r3.w, r1.w, l(12), r1.z
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r3.w, r3.w, l(0), u3.xxxx
      add r3.z, r3.w, r3.z
      iadd r4.xy, r3.xxxx, l(-12, 12, 0, 0)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r3.w, r4.x, l(0), u3.xxxx
      add r3.z, r3.w, r3.z
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r3.w, r4.y, l(0), u3.xxxx
      add r3.z, r3.w, r3.z
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r3.w, r3.x, l(0), u2.xxxx
      add r3.z, -r3.w, r3.z
      mul r3.z, r0.y, r3.z
      mad r3.y, r0.x, r3.y, r3.z
      store_structured u3.x, r3.x, l(0), r3.y
      iadd r1.w, r1.w, l(1)
    endloop 
    mov r0.w, r1.z
  endloop 
  iadd r0.z, r0.z, l(1)
endloop 
ret 
// Approximately 61 instruction slots used
